// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// @ unique -- ? could be empty







model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String   
  price     Int   
  images      String[]
  website       String
  Name       String
  Duration       Int
  Members       Int
  latitude       String
  longitude       String


  type        Type
  property    Property


  createdAt DateTime @default(now())


  user User @relation(fields:[userId], references: [id])
    userId String @db.ObjectId

    postDetail PostDetail?
    savedPosts SavedPost[]
}




enum Type {
Freelance
BugHunting
}

enum Property {
website
mobile
game
other
}

model PostDetail{
   id        String   @id @default(auto()) @map("_id") @db.ObjectId
   desc String 
   tools String?   //? means not requir4ed
   AI String?
   Notes String?
   difficulty Int?



post Post @relation(fields: [postId], references: [id])
postId String @db.ObjectId @unique

}

model SavedPost{
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  userId String @db.ObjectId @unique
  postId String @db.ObjectId @unique
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())

posts Post[]  // array because single user can create many posts
    savedPosts SavedPost[]
    chats Chat[] @relation(fields:[chatIDs], references: [id])
    chatIDs String[] @db.ObjectId
}

model Chat{ //2 users and multiple msg and last msg and notification and seen 
    id String @id @default(auto()) @map("_id") @db.ObjectId
    users User[]  @relation(fields:[userIDs], references: [id])
    userIDs String[] @db.ObjectId
      createdAt DateTime @default(now())
      seenBy String[] @db.ObjectId
      messages Message[] 
      lastMessage String?
}


model Message{ 
    id String @id @default(auto()) @map("_id") @db.ObjectId
    text String 
    userId String 
    chat Chat @relation(fields: [chatId], references: [id])
    chatId String @db.ObjectId

      createdAt DateTime @default(now())

}

// after any change in this file run (to save changes):    npx prisma db push     